// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique
  title String @unique
  body String
  author User @relation(fields:[authorId], references: [id])
  authorId String @db.ObjectId
  comments Comment[]
  categoryIDs String[]   @db.ObjectId
  categories  PostCategory[] @relation(fields: [categoryIDs], references: [id])
}

model PostCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image  String?
  postIDs String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIDs], references: [id])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String? @unique
  name String?
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role Role @default(USER)

  accounts Account[]
  addresses Address[]
  posts Post[]
  orders Order[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Address {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields:[userId], references: [id])
  userId String @db.ObjectId
  street String
  city   String
  state  String
  zip    String
  country String
}



model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  image String
  gallery String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId String? @db.ObjectId
  category ProductCategory? @relation(fields:[categoryId], references: [id])
  price Int

  orderIDs String[] @db.ObjectId
  orders Order[] @relation(fields: [orderIDs], references: [id])
}

model ProductCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  products Product[]
  image  String?
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields:[userId], references: [id])
  userId String @db.ObjectId

  productIDs String[] @db.ObjectId
  products Product[] @relation(fields: [productIDs], references: [id])
}

enum Role {
  USER
  ADMIN
  EDITOR
}